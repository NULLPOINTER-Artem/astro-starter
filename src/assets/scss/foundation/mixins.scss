/// Hides the text in an element, commonly used to show an image. Some elements will need block-level styles applied.
/// @link http://zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement
/// @example @include hide-text;

@mixin hide-text {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

/// Font-smothing
/// @example @include font-smoothing(on);
/// @include font-smoothing(off);
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/// Mixin for styling form-placeholders
/// @example @include placeholder { color: red; }

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &::-moz-placeholder {
    opacity: 1;
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &.placeholder {
    @content;
  }
}

/// Animate css properties
/// @example @include animate(color);
/// or @include animate(color width);
/// or @include animate(color width, 1s, linear);
/// or @include animate(color width, 1s, ease-in, 0.5s); - defining delay ALL params should be passed!

$animation-speed: 0.3s !default;

@mixin animate($properties, $duration: $animation-speed, $easing: ease-in-out, $delay: false) {
  @if ($properties and $duration and $easing and $delay) {
    $list: ();
    @each $prop in $properties {
      $str: #{$prop} #{$duration} #{$easing} #{$delay};
      $list: append($list, $str, comma);
    }
    transition: $list;
  } @else {
    $list: ();
    @each $prop in $properties {
      $str: #{$prop} #{$duration} #{$easing};
      $list: append($list, $str, comma);
    }
    transition: $list;
  }
}

/*
  Example: @include media('sm') {} || @include media('xs') {}
*/

@mixin media($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $width: map-get($breakpoints, $breakpoint);
    $max-width: get-max($breakpoints);

    @media screen and (max-width: $width) {
      @content;
    }

    @if $width == $max-width {
      @media screen and (min-width: $width) {
        @content;
      }
    }
  }

  // Error handling
  @else {
    @error "The breakpoint is not defined. Please check out 'scss/foundation/variables'.";
  }
}
